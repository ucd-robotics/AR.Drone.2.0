/* Auto-generated by genmsg_cpp for file /home/aaroncz/fuerte_workspace/AR.Drone.2.0/image_process/msg/faceInfo.msg */
#ifndef IMAGE_PROCESS_MESSAGE_FACEINFO_H
#define IMAGE_PROCESS_MESSAGE_FACEINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace image_process
{
template <class ContainerAllocator>
struct faceInfo_ {
  typedef faceInfo_<ContainerAllocator> Type;

  faceInfo_()
  : centerPointX(0)
  , centerPointY(0)
  , size(0)
  {
  }

  faceInfo_(const ContainerAllocator& _alloc)
  : centerPointX(0)
  , centerPointY(0)
  , size(0)
  {
  }

  typedef int16_t _centerPointX_type;
  int16_t centerPointX;

  typedef int16_t _centerPointY_type;
  int16_t centerPointY;

  typedef int16_t _size_type;
  int16_t size;


  typedef boost::shared_ptr< ::image_process::faceInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_process::faceInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct faceInfo
typedef  ::image_process::faceInfo_<std::allocator<void> > faceInfo;

typedef boost::shared_ptr< ::image_process::faceInfo> faceInfoPtr;
typedef boost::shared_ptr< ::image_process::faceInfo const> faceInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::image_process::faceInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::image_process::faceInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace image_process

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::image_process::faceInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::image_process::faceInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::image_process::faceInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "09861ec5a192c12395d479660bb452ff";
  }

  static const char* value(const  ::image_process::faceInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x09861ec5a192c123ULL;
  static const uint64_t static_value2 = 0x95d479660bb452ffULL;
};

template<class ContainerAllocator>
struct DataType< ::image_process::faceInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "image_process/faceInfo";
  }

  static const char* value(const  ::image_process::faceInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::image_process::faceInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 centerPointX\n\
int16 centerPointY\n\
int16 size\n\
\n\
";
  }

  static const char* value(const  ::image_process::faceInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::image_process::faceInfo_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::image_process::faceInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.centerPointX);
    stream.next(m.centerPointY);
    stream.next(m.size);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct faceInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::image_process::faceInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::image_process::faceInfo_<ContainerAllocator> & v) 
  {
    s << indent << "centerPointX: ";
    Printer<int16_t>::stream(s, indent + "  ", v.centerPointX);
    s << indent << "centerPointY: ";
    Printer<int16_t>::stream(s, indent + "  ", v.centerPointY);
    s << indent << "size: ";
    Printer<int16_t>::stream(s, indent + "  ", v.size);
  }
};


} // namespace message_operations
} // namespace ros

#endif // IMAGE_PROCESS_MESSAGE_FACEINFO_H

