/**
* @file objectDetection.cpp
* @author A. Huaman ( based in the classic facedetect.cpp in samples/c )
* @brief A simplified version of facedetect.cpp, show how to load a cascade classifier and how to find objects (Face + eyes) in a video stream
*/
#include "ros/ros.h"
#include "std_msgs/String.h"
#include "opencv2/objdetect/objdetect.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <image_process/faceInfo.h>
#include <iostream>
#include <stdio.h>

using namespace std;
using namespace cv;

/** Function Headers */
void detectAndDisplay( Mat frame );

/** Global variables */
//-- Note, either copy these two files from opencv/data/haarscascades to your current folder, or change these locations
String face_cascade_name = "/home/aaroncz/OpenCV/OpenCV-2.4.2/data/haarcascades/haarcascade_frontalface_alt.xml";
String eyes_cascade_name ="/home/aaroncz/OpenCV/OpenCV-2.4.2/data/haarcascades/haarcascade_eye_tree_eyeglasses.xml";
CascadeClassifier face_cascade;
CascadeClassifier eyes_cascade;
image_process::faceInfo face_info;
string window_name = "Capture - Face detection";
RNG rng(12345);
int imagecounter = 0;

/**
* @function main
*/
int main( int argc, char** argv	 )
{

  ros::init(argc, argv, "face_track");
  ros::NodeHandle n;
  CvCapture* capture;
  Mat frame;
  ros::Publisher chatter_pub = n.advertise<image_process::faceInfo>("face_track", 1000);   	
  //-- 1. Load the cascades
  if( !face_cascade.load( face_cascade_name ) ){ printf("--(!)Error loading\n"); return -1; };
  if( !eyes_cascade.load( eyes_cascade_name ) ){ printf("--(!)Error loading\n"); return -1; };

  //-- 2. Read the video stream
  capture = cvCaptureFromCAM( -1 );
  if( capture )
  {
    for(;;)
    {
      frame = cvQueryFrame( capture );

      //-- 3. Apply the classifier to the frame
      if( !frame.empty() )
       { detectAndDisplay( frame ); }
      else
       { printf(" --(!) No captured frame -- Break!"); break; }
      chatter_pub.publish(face_info);
      int c = waitKey(10);
      if( (char)c == 'c' ) { break; }

    }
  }
  return 0;
}

/**
* @function detectAndDisplay
*/
void detectAndDisplay( Mat frame )
{
   std::vector<Rect> faces;
   Mat frame_gray;

   cvtColor( frame, frame_gray, CV_BGR2GRAY );
   equalizeHist( frame_gray, frame_gray );
   //-- Detect faces
   face_cascade.detectMultiScale( frame_gray, faces, 1.1, 2, 0|CV_HAAR_SCALE_IMAGE, Size(50, 50) );
   

   //no face found so all sizes = 0
   if(faces.size() == 0){
      printf("No face!\n");
      face_info.centerPointX = 0;
      face_info.centerPointY = 0;
      face_info.size = 0;
   }

   for( size_t i = 0; i < faces.size(); i++ )
    {
      //this names the name to save the image of a face if found.
      ostringstream os;
      os << imagecounter << " face.png";
      string name = os.str();
      //this command saves the image in current directory.
      imwrite( name, frame );

      imagecounter += 1;
      printf("We have a face!!)\n");
      Point center( faces[i].x + faces[i].width/2, faces[i].y + faces[i].height/2 );
      
      //faceInfo message information stored here
      face_info.centerPointX = faces[i].x + faces[i].width/2;
      face_info.centerPointY = faces[i].y + faces[i].height/2;
      face_info.size = faces[i].width;

      circle( frame, center, 1, CV_RGB(255,0,0), -1, 8,0);
      ellipse( frame, center, Size( faces[i].width/2, faces[i].height/2), 0, 0, 360, Scalar( 255, 0, 255 ), 2, 8, 0 );

      Mat faceROI = frame_gray( faces[i] );
      std::vector<Rect> eyes;

      //-- In each face, detect eyes
      eyes_cascade.detectMultiScale( faceROI, eyes, 1.1, 2, 0 |CV_HAAR_SCALE_IMAGE, Size(50, 50) );

      for( size_t j = 0; j < eyes.size(); j++ )
       {
         Point eye_center( faces[i].x + eyes[j].x + eyes[j].width/2, faces[i].y + eyes[j].y + eyes[j].height/2 );
         int radius = cvRound( (eyes[j].width + eyes[j].height)*0.25 );
         circle( frame, eye_center, radius, Scalar( 255, 0, 0 ), 3, 8, 0 );
       }
    }
   //-- Show what you got
   imshow( window_name, frame );
}
