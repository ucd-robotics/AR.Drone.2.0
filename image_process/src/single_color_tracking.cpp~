#ifdef _CH_
#pragma package <opencv>
#endif

#include "ros/ros.h"
#include "std_msgs/String.h"
#include <cv.h>
#include <highgui.h>
#include <stdio.h>
#include <ctype.h>
#include <image_process/Positions.h>

//Source: http://www.aishack.in/2010/07/tracking-colored-objects-in-opencv/

IplImage* GetThresholdedImage(IplImage* img) {
	// Convert the image into an HSV image
	IplImage* imgHSV = cvCreateImage(cvGetSize(img), 8, 3);
	cvCvtColor(img, imgHSV, CV_BGR2HSV);

	IplImage* imgThreshed = cvCreateImage(cvGetSize(img), 8, 1);
	//Yellow
	//cvInRangeS(imgHSV, cvScalar(20, 100, 100), cvScalar(30, 255, 255),imgThreshed);

	//blue
	cvInRangeS(imgHSV, cvScalar(100, 135, 135), cvScalar(140, 255, 255), imgThreshed);

	//Red
	//cant find good color range to track

	cvReleaseImage(&imgHSV);
	return imgThreshed;
}

int main(int argc, char** argv) {

	ros::init(argc, argv, "single_color_tracking");
	ros::NodeHandle n;
	image_process::Positions pos_msg;

	// Initialize capturing live feed from the camera
	CvCapture* capture = 0;
	capture = cvCaptureFromCAM(0);

	// Couldn't get a device? Throw an error and quit
	if (!capture) {
		printf("Could not initialize capturing...\n");
		return -1;
	}

	// The two windows we'll be using
	cvNamedWindow("video");
	cvNamedWindow("thresh");

	// This image holds the "scribble" data...
	// the tracked positions of the ball
	IplImage* imgScribble = NULL;

	//ros::NodeHandle private_node_handle_("~");

	//ros::Publisher chatter_pub = n.advertise<std_msgs::String>("test", 1000);
 	//ros::Publisher chatter_pub = n.advertise<geometry_msgs::Twist>("test", 1000);   	
 	ros::Publisher chatter_pub = n.advertise<image_process::Positions>("test", 1000);   	

	//int count = 0;
	// An infinite loop
	while (ros::ok()) {
		// Will hold a frame captured from the camera
		IplImage* frame = 0;
		frame = cvQueryFrame(capture);
		// If we couldn't grab a frame... quit
		if (!frame)
			break;

		// If this is the first frame, we need to initialize it
		if (imgScribble == NULL) {
			imgScribble = cvCreateImage(cvGetSize(frame), 8, 3);
		}

		// Holds the yellow thresholded image (yellow = white, rest = black)
		IplImage* imgYellowThresh = GetThresholdedImage(frame);

		// Calculate the moments to estimate the position of the ball
		CvMoments *moments = (CvMoments*) malloc(sizeof(CvMoments));
		cvMoments(imgYellowThresh, moments, 1);

		// The actual moment values
		double moment10 = cvGetSpatialMoment(moments, 1, 0);
		double moment01 = cvGetSpatialMoment(moments, 0, 1);
		double area = cvGetCentralMoment(moments, 0, 0);

		// Holding the last and current ball positions
		static int posX = 0;
		static int posY = 0;

		int lastX = posX;
		int lastY = posY;

		posX = moment10 / area;
		posY = moment01 / area;

		// Print it out for debugging purposes
		//printf("position (%d,%d)\n", posX, posY);

		// We want to draw a line only if its a valid position
		if (lastX > 0 && lastY > 0 && posX > 0 && posY > 0) {
			// Draw a yellow line from the previous point to the current point
			cvLine(imgScribble, cvPoint(posX, posY), cvPoint(lastX, lastY),
					cvScalar(100, 170, 170), 5);
		}

		// Add the scribbling image and the frame...
		cvAdd(frame, imgScribble, frame);
		cvShowImage("thresh", imgYellowThresh);
		cvShowImage("video", frame);

		// Wait for a keypress
		int c = cvWaitKey(10);
		while(c != -1) {
			// If pressed, break out of the loop
			break;
		}
		// Release the thresholded image+moments... we need no memory leaks.. please
		cvReleaseImage(&imgYellowThresh);
		delete moments;

		//private_node_handle_.param("posX", posX, int(1));
		//private_node_handle_.param("posY", posY, int(2));
		//std_msgs::String msg;
	
		//std::stringstream ss;
		//ss << posX << " " << posY;
		//msg.data = ss.str();
		//chatter_pub.publish(msg);
		//ROS_INFO("%s", msg.data.c_str());

 		//geometry_msgs::Twist msg;
   		//msg.linear.x = posX;
   		//msg.linear.y = posY;    
   		//chatter_pub.publish(msg);

		pos_msg.PosX = posX;
		pos_msg.PosY = posY;
		chatter_pub.publish(pos_msg);
	}

	// We're done using the camera. Other applications can now use it
	cvReleaseCapture(&capture);

	return 0;
}

