/* Auto-generated by genmsg_cpp for file /home/aaroncz/fuerte_workspace/ardrone/ardrone_autonomy/msg/Navdata.msg */
#ifndef ARDRONE_AUTONOMY_MESSAGE_NAVDATA_H
#define ARDRONE_AUTONOMY_MESSAGE_NAVDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace ardrone_autonomy
{
template <class ContainerAllocator>
struct Navdata_ {
  typedef Navdata_<ContainerAllocator> Type;

  Navdata_()
  : header()
  , batteryPercent(0.0)
  , state(0)
  , magX(0)
  , magY(0)
  , magZ(0)
  , pressure(0)
  , temp(0)
  , wind_speed(0.0)
  , wind_angle(0.0)
  , wind_comp_angle(0.0)
  , rotX(0.0)
  , rotY(0.0)
  , rotZ(0.0)
  , altd(0)
  , vx(0.0)
  , vy(0.0)
  , vz(0.0)
  , ax(0.0)
  , ay(0.0)
  , az(0.0)
  , tags_count(0)
  , tags_type()
  , tags_xc()
  , tags_yc()
  , tags_width()
  , tags_height()
  , tags_orientation()
  , tags_distance()
  , tm(0.0)
  {
  }

  Navdata_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , batteryPercent(0.0)
  , state(0)
  , magX(0)
  , magY(0)
  , magZ(0)
  , pressure(0)
  , temp(0)
  , wind_speed(0.0)
  , wind_angle(0.0)
  , wind_comp_angle(0.0)
  , rotX(0.0)
  , rotY(0.0)
  , rotZ(0.0)
  , altd(0)
  , vx(0.0)
  , vy(0.0)
  , vz(0.0)
  , ax(0.0)
  , ay(0.0)
  , az(0.0)
  , tags_count(0)
  , tags_type(_alloc)
  , tags_xc(_alloc)
  , tags_yc(_alloc)
  , tags_width(_alloc)
  , tags_height(_alloc)
  , tags_orientation(_alloc)
  , tags_distance(_alloc)
  , tm(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _batteryPercent_type;
  float batteryPercent;

  typedef uint32_t _state_type;
  uint32_t state;

  typedef int32_t _magX_type;
  int32_t magX;

  typedef int32_t _magY_type;
  int32_t magY;

  typedef int32_t _magZ_type;
  int32_t magZ;

  typedef int32_t _pressure_type;
  int32_t pressure;

  typedef int32_t _temp_type;
  int32_t temp;

  typedef float _wind_speed_type;
  float wind_speed;

  typedef float _wind_angle_type;
  float wind_angle;

  typedef float _wind_comp_angle_type;
  float wind_comp_angle;

  typedef float _rotX_type;
  float rotX;

  typedef float _rotY_type;
  float rotY;

  typedef float _rotZ_type;
  float rotZ;

  typedef int32_t _altd_type;
  int32_t altd;

  typedef float _vx_type;
  float vx;

  typedef float _vy_type;
  float vy;

  typedef float _vz_type;
  float vz;

  typedef float _ax_type;
  float ax;

  typedef float _ay_type;
  float ay;

  typedef float _az_type;
  float az;

  typedef uint32_t _tags_count_type;
  uint32_t tags_count;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _tags_type_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  tags_type;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _tags_xc_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  tags_xc;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _tags_yc_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  tags_yc;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _tags_width_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  tags_width;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _tags_height_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  tags_height;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _tags_orientation_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  tags_orientation;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _tags_distance_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  tags_distance;

  typedef float _tm_type;
  float tm;


  typedef boost::shared_ptr< ::ardrone_autonomy::Navdata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ardrone_autonomy::Navdata_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Navdata
typedef  ::ardrone_autonomy::Navdata_<std::allocator<void> > Navdata;

typedef boost::shared_ptr< ::ardrone_autonomy::Navdata> NavdataPtr;
typedef boost::shared_ptr< ::ardrone_autonomy::Navdata const> NavdataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ardrone_autonomy::Navdata_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ardrone_autonomy::Navdata_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ardrone_autonomy

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ardrone_autonomy::Navdata_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ardrone_autonomy::Navdata_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ardrone_autonomy::Navdata_<ContainerAllocator> > {
  static const char* value() 
  {
    return "519f4c8d8dd741ec8920b3b2a08e63ba";
  }

  static const char* value(const  ::ardrone_autonomy::Navdata_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x519f4c8d8dd741ecULL;
  static const uint64_t static_value2 = 0x8920b3b2a08e63baULL;
};

template<class ContainerAllocator>
struct DataType< ::ardrone_autonomy::Navdata_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ardrone_autonomy/Navdata";
  }

  static const char* value(const  ::ardrone_autonomy::Navdata_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ardrone_autonomy::Navdata_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
# Navdata including the ARDrone 2 specifica sensors\n\
# (magnetometer, barometer)\n\
\n\
# 0 means no battery, 100 means full battery\n\
float32 batteryPercent\n\
\n\
# 0: Unknown, 1: Init, 2: Landed, 3: Flying, 4: Hovering, 5: Test\n\
# 6: Taking off, 7: Goto Fix Point, 8: Landing, 9: Looping\n\
# Note: 3,7 seems to discriminate type of flying (isFly = 3 | 7)\n\
uint32 state\n\
\n\
int32 magX\n\
int32 magY\n\
int32 magZ\n\
\n\
# pressure sensor\n\
int32 pressure\n\
\n\
# apparently, there was a temperature sensor added as well.\n\
int32 temp\n\
\n\
# wind sensing...\n\
float32 wind_speed\n\
float32 wind_angle\n\
float32 wind_comp_angle\n\
\n\
# left/right tilt in degrees (rotation about the X axis)\n\
float32 rotX\n\
\n\
# forward/backward tilt in degrees (rotation about the Y axis)\n\
float32 rotY\n\
\n\
# orientation in degrees (rotation about the Z axis)\n\
float32 rotZ\n\
\n\
# estimated altitude (cm)\n\
int32 altd\n\
\n\
# linear velocity (mm/sec)\n\
float32 vx\n\
\n\
# linear velocity (mm/sec)\n\
float32 vy\n\
\n\
# linear velocity (mm/sec)\n\
float32 vz\n\
\n\
#linear accelerations (unit: g)\n\
float32 ax\n\
float32 ay\n\
float32 az\n\
\n\
#Tags in Vision Detectoion\n\
uint32 tags_count\n\
uint32[] tags_type\n\
uint32[] tags_xc\n\
uint32[] tags_yc\n\
uint32[] tags_width\n\
uint32[] tags_height\n\
float32[] tags_orientation\n\
float32[] tags_distance\n\
\n\
#time stamp\n\
float32 tm\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::ardrone_autonomy::Navdata_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::ardrone_autonomy::Navdata_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::ardrone_autonomy::Navdata_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ardrone_autonomy::Navdata_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.batteryPercent);
    stream.next(m.state);
    stream.next(m.magX);
    stream.next(m.magY);
    stream.next(m.magZ);
    stream.next(m.pressure);
    stream.next(m.temp);
    stream.next(m.wind_speed);
    stream.next(m.wind_angle);
    stream.next(m.wind_comp_angle);
    stream.next(m.rotX);
    stream.next(m.rotY);
    stream.next(m.rotZ);
    stream.next(m.altd);
    stream.next(m.vx);
    stream.next(m.vy);
    stream.next(m.vz);
    stream.next(m.ax);
    stream.next(m.ay);
    stream.next(m.az);
    stream.next(m.tags_count);
    stream.next(m.tags_type);
    stream.next(m.tags_xc);
    stream.next(m.tags_yc);
    stream.next(m.tags_width);
    stream.next(m.tags_height);
    stream.next(m.tags_orientation);
    stream.next(m.tags_distance);
    stream.next(m.tm);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Navdata_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ardrone_autonomy::Navdata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ardrone_autonomy::Navdata_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "batteryPercent: ";
    Printer<float>::stream(s, indent + "  ", v.batteryPercent);
    s << indent << "state: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.state);
    s << indent << "magX: ";
    Printer<int32_t>::stream(s, indent + "  ", v.magX);
    s << indent << "magY: ";
    Printer<int32_t>::stream(s, indent + "  ", v.magY);
    s << indent << "magZ: ";
    Printer<int32_t>::stream(s, indent + "  ", v.magZ);
    s << indent << "pressure: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pressure);
    s << indent << "temp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.temp);
    s << indent << "wind_speed: ";
    Printer<float>::stream(s, indent + "  ", v.wind_speed);
    s << indent << "wind_angle: ";
    Printer<float>::stream(s, indent + "  ", v.wind_angle);
    s << indent << "wind_comp_angle: ";
    Printer<float>::stream(s, indent + "  ", v.wind_comp_angle);
    s << indent << "rotX: ";
    Printer<float>::stream(s, indent + "  ", v.rotX);
    s << indent << "rotY: ";
    Printer<float>::stream(s, indent + "  ", v.rotY);
    s << indent << "rotZ: ";
    Printer<float>::stream(s, indent + "  ", v.rotZ);
    s << indent << "altd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.altd);
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<float>::stream(s, indent + "  ", v.vz);
    s << indent << "ax: ";
    Printer<float>::stream(s, indent + "  ", v.ax);
    s << indent << "ay: ";
    Printer<float>::stream(s, indent + "  ", v.ay);
    s << indent << "az: ";
    Printer<float>::stream(s, indent + "  ", v.az);
    s << indent << "tags_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tags_count);
    s << indent << "tags_type[]" << std::endl;
    for (size_t i = 0; i < v.tags_type.size(); ++i)
    {
      s << indent << "  tags_type[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.tags_type[i]);
    }
    s << indent << "tags_xc[]" << std::endl;
    for (size_t i = 0; i < v.tags_xc.size(); ++i)
    {
      s << indent << "  tags_xc[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.tags_xc[i]);
    }
    s << indent << "tags_yc[]" << std::endl;
    for (size_t i = 0; i < v.tags_yc.size(); ++i)
    {
      s << indent << "  tags_yc[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.tags_yc[i]);
    }
    s << indent << "tags_width[]" << std::endl;
    for (size_t i = 0; i < v.tags_width.size(); ++i)
    {
      s << indent << "  tags_width[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.tags_width[i]);
    }
    s << indent << "tags_height[]" << std::endl;
    for (size_t i = 0; i < v.tags_height.size(); ++i)
    {
      s << indent << "  tags_height[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.tags_height[i]);
    }
    s << indent << "tags_orientation[]" << std::endl;
    for (size_t i = 0; i < v.tags_orientation.size(); ++i)
    {
      s << indent << "  tags_orientation[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tags_orientation[i]);
    }
    s << indent << "tags_distance[]" << std::endl;
    for (size_t i = 0; i < v.tags_distance.size(); ++i)
    {
      s << indent << "  tags_distance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tags_distance[i]);
    }
    s << indent << "tm: ";
    Printer<float>::stream(s, indent + "  ", v.tm);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARDRONE_AUTONOMY_MESSAGE_NAVDATA_H

